# 커밋 메시지 작성 규칙

## 커밋 메시지 형식
다음 형식을 따라 커밋 메시지를 작성해주세요:

### 타입
- feat: 새로운 기능 추가
- fix: 버그 수정
- docs: 문서 수정
- style: 코드 포맷팅, 세미콜론 누락 등
- refactor: 코드 리팩토링
- test: 테스트 코드 추가/수정
- chore: 빌드 설정, 패키지 설정 등
- perf: 성능 개선
- ci: CI/CD 설정
- build: 빌드 시스템 수정

### 형식
타입(스코프): 간결한 설명

### 예시
- feat: 사용자 로그인 기능 추가
- fix: 채팅 메시지 전송 오류 해결
- docs: README 설치 가이드 업데이트
- style: ESLint 규칙에 따른 코드 포맷팅
- refactor: API 호출 로직 개선
- test: 사용자 인증 테스트 케이스 추가
- chore: 의존성 패키지 버전 업데이트

### 커밋 메시지 작성 가이드라인
- 50자 이내로 간결하게 작성
- 명령형 현재시제 사용 ("추가했다" → "추가")
- 첫 글자는 소문자로 시작
- 마침표(.)는 사용하지 않음
- 변경사항의 "무엇"과 "왜"를 명확히 표현

### 감정 관리 앱(mooda) 프로젝트 특화 가이드
- UI 컴포넌트: feat(ui): 채팅 인터페이스 컴포넌트 추가
- API 관련: feat(api): OpenAI 채팅 응답 엔드포인트 구현
- 데이터베이스: feat(db): 사용자 대화 기록 스키마 추가
- 감정 분석: feat(emotion): 일일 감정 요약 알고리즘 구현
- 인증: feat(auth): NextAuth 소셜 로그인 설정